#!/usr/bin/env python3

import re
import sys
from os import path
from typing import AnyStr, List

INCLUDE_RE = re.compile(
    r"""^\s* # leading whitespace
include \s+
"(?P<path>.*)"
$""",
    re.VERBOSE,
)


def get_includes(fname: AnyStr):
    """Parse Dafny file `fname` for include directives."""
    includes = []
    with open(fname, "r") as f:
        for line in f:
            m = INCLUDE_RE.search(line)
            if m:
                includes.append(m.group("path"))
    return includes


def relativize(fname: AnyStr, include: AnyStr) -> str:
    """Resolve `include` to a normalized path, based on the directory of `fname`."""
    working_dir = path.dirname(fname)
    p = path.join(working_dir, include)
    return path.normpath(p)


def dependency_list(fname: AnyStr, includes: List[AnyStr]) -> str:
    """Return list of dependencies for `fname` from raw include paths
    `includes`."""
    includes = [relativize(fname, include) + ".ok" for include in includes]
    return " ".join(includes)


for fname in sys.argv[1:]:
    includes = get_includes(fname)
    deps = dependency_list(fname, includes)
    print(f"{fname}.ok: {deps}")
